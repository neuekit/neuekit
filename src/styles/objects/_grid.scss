/*----------------------------------------------------------------------------*\
    #GRID OBJECT
\*----------------------------------------------------------------------------*/
@use "sass:math";

@mixin _nu-object__grid(
    $maxWidth:          $maxWidth,
    $gutter:            $gutter,
    $gutterSmall:       $gutterSmall,
    $mediumBreakpoint:  m
) {

    // .o-grid
    display: flex;
    flex-shrink: 0;
    flex-wrap: wrap;
    margin: 0 auto;
    max-width: nu-rem( $maxWidth );
    padding: 0 nu-rem( $gutterSmall );
    width: 100%;


    /*  Elements  */

    &__item { // .o-grid__item
        @if(not($nu-gridAuto)) { flex-basis: 100%; }
        flex-direction: column;
        @if($nu-gridAuto) { flex-grow: 1; }
        max-width: 100%;
        padding: 0 nu-rem( $gutterSmall );
        @if(not($nu-gridAuto)) { width: 100%; }
    }


    /*  Modifiers  */

    &--item { // .o-grid--item
        display: block;
        flex-direction: column;
        padding: 0 nu-rem( $gutterSmall * 2 );
    }

    &#{ & }--item { // .o-grid.o-grid--item
        display: block;
    }

    & &, // .o-grid .o-grid
    &--unnest#{&}--unnest { // .o-grid--unnest
        flex-shrink: 1;
        margin: 0 #{ nu-rem( -$gutterSmall * 2 ) };
        max-width: none;
        width: auto;
    }

    &--max { // .o-grid--max
        max-width: none;
    }

    &#{ & }--edge, // .o-grid.o-grid--edge
    &--edge > &__item { // .o-grid--edge > .o-grid__item
        padding: 0;
    }

    & &--nest#{&}--nest, // .o-grid--nest
    &#{ & }--edge, // .o-grid--edge
    &--edge &:not(&--unnest) { // .o-grid--edge .o-grid
        margin: 0 auto;
    }

    @if($gutter != $gutterSmall) {

        @include nu-media($mediumBreakpoint) {

            padding: 0 nu-rem( $gutter );

            &__item { // .o-grid__item
                padding: 0 nu-rem( $gutter );
            }

            &--item { // .o-grid--item
                padding: 0 nu-rem( $gutter * 2 );
            }

            & &, // .o-grid .o-grid
            &--unnest { // .o-grid--unnest
                margin: 0 #{ nu-rem( -($gutter * 2) ) };
            }
        }
    }

    @include nu-breakpoints(up) {

        @for $grid from 1 through $nu-gridColumns {

            $width: math.div(floor(math.div(100%, $grid) * 1000), 1000);

            &--items-#{$grid}#{$break} &__item { // .o-grid--items-2@m .o-grid__item
                flex-basis: $width;
                max-width: $width;
            }
        }
    }
}



/// @group Objects
/// @param {Length} $maxWidth [$nu-gridMaxWidth] - Max width of grid container
/// @param {Length} $gutter [$nu-gridGutter] - Space between columns
/// @param {Length} $gutterSmall [$nu-gridGutterSmall] - Mobile space between columns
/// @param {Length} $mediumBreakpoint [$mediumBreakpoint] - Which breakpoint to switch gutter
/// @require {function} nu-rem
/// @require {mixin} nu-breakpoints

@mixin nu-object__grid(
    $maxWidth:          $nu-gridMaxWidth,
    $gutter:            $nu-gridGutter,
    $gutterSmall:       $nu-gridGutterSmall,
    $mediumBreakpoint:  m
) {

    .o-grid {

        @include _nu-object__grid(
            $maxWidth:          $maxWidth,
            $gutter:            $gutter,
            $gutterSmall:       $gutterSmall,
            $mediumBreakpoint:  $mediumBreakpoint
        );
    }
}


